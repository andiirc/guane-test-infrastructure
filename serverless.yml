service: guane-test-infrastructure

frameworkVersion: '2'

custom:
  default_stage: dev
  active: ${file(conf.${self:provider.stage}.yml):conf}  

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, self:custom.default_stage}
  region: ${self:custom.active.REGION}
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cloudfront:CreateInvalidation
      Resource:
        - FrontPageCloudFront.Arn
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        Fn::Join:
          - /
          - - Fn::GetAtt:
                - FrontWebsiteBucket
                - Arn
            - '*'

resources:
  Resources:
    LambdaIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
                  - "edgelambda.amazonaws.com"
        Path: "/"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    LambdaEdge:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.handler
        Role: !GetAtt LambdaIAMRole.Arn
        Code:
          ZipFile: |
            'use strict';
              exports.handler = (event, context, callback) => {
                const response = event.Records[0].cf.response;
                const headers = response.headers;
                headers['content-security-policy'] = [{
                  key: 'Content-Security-Policy',
                  value: "default-src 'none'; style-src 'self'; script-src 'self' 'sha256-0PyXrbuxlQmxEjarWHQyByi0FHnr0JH25+UFN152OVQ='; object-src 'self'; manifest-src 'self'; img-src 'self'; connect-src 'self'; font-src https://fonts.gstatic.com"
                }];
                headers['x-content-type-options'] = [{
                  key: 'X-Content-Type-Options',
                  value: 'nosniff'
                }];
                headers['x-frame-options'] = [{
                  key: 'X-Frame-Options',
                  value: 'SAMEORIGIN'
                }];
                headers['x-permitted-cross-domain-policies'] = [{
                  key: 'X-Permitted-Cross-Domain-Policies',
                  value: 'master-only'
                }];
                headers['x-xss-protection'] = [{
                  key: 'X-XSS-Protection',
                  value: '1; mode=block'
                }];
                headers['referrer-policy'] = [{
                  key: 'Referrer-Policy',
                  value: 'SAME-ORIGIN'
                }];
                headers['strict-transport-security'] = [{
                  key: 'Strict-Transport-Security',
                  value: 'max-age=63072000; includeSubdomains; preload'
                }];
                callback(null, response);
            };
        Runtime: ${self:provider.runtime}
        MemorySize: 128
        Timeout: 1
    LambdaEdgeVersion:
      Type: AWS::Lambda::Version
      DeletionPolicy: Retain
      Properties:
        FunctionName: !GetAtt LambdaEdge.Arn
    FrontWebsiteBucket:
      Type: AWS::S3::Bucket
    FrontWebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: 
          Ref: FrontWebsiteBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                Fn::Join:
                  - /
                  - - Fn::GetAtt:
                        - FrontWebsiteBucket
                        - Arn
                    - '*'
              Principal:
                CanonicalUser:
                  Fn::GetAtt:
                    - FrontWebsiteOriginAccessIdentity
                    - S3CanonicalUserId
    FrontWebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Origin Access Identity to Access Website Bucket
    FrontPageCloudFront:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - FrontWebsiteBucket
      Properties:
        DistributionConfig:
          Origins:
            - DomainName:
                Fn::GetAtt:
                  - FrontWebsiteBucket
                  - RegionalDomainName
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - /
                    - - origin-access-identity
                      - cloudfront
                      - !Ref FrontWebsiteOriginAccessIdentity
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            LambdaFunctionAssociations:
              - EventType: viewer-response
                LambdaFunctionARN: 
                  Ref: LambdaEdgeVersion
            SmoothStreaming: false
          Comment: appquierelo website in s3
          DefaultRootObject: index.html
          Enabled: true
          HttpVersion: http2
          PriceClass: PriceClass_All
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
